@page "/quickgrid3"

@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.WebUtilities

@inject HttpClient Http

<h3>QuickGridWebApi</h3>

<div class="grid">
    <QuickGrid ItemsProvider="gridItemsProvider" Pagination="pagination" @ref="grid">
        <PropertyColumn Property="@(s => s.StudentId)" Sortable="true" />
        <PropertyColumn Property="@(s => s.Jmeno)" Sortable="true">
            <ColumnOptions>
                <div>
                    <input type="search" class="form-control-plaintext" autofocus @bind="NameFilter" @bind:event="oninput" placeholder="Jméno..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(s => s.Studuje)" Sortable="true" />
        <TemplateColumn>
            <NavLink class="btn btn-primary" href="@($"students/edit/{context.StudentId}")">Edit</NavLink>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="pagination" />

@code {
    QuickGrid<Student>? grid;
    PaginationState pagination = new PaginationState() { ItemsPerPage = 10 };

    GridItemsProvider<Student>? gridItemsProvider;

    private string nameFilter = string.Empty;
    
    private string NameFilter
    {
        get => nameFilter;
        set
        {
            nameFilter = value;

            grid?.RefreshDataAsync();
        }
    }

    protected override void OnInitialized()
    {
        gridItemsProvider = async req =>
        {
            string uri = "/students/page";

            uri = QueryHelpers.AddQueryString(uri, "startIndex", req.StartIndex.ToString());
            uri = QueryHelpers.AddQueryString(uri, "count", (req.Count ?? 10).ToString());

            var properties = req.GetSortByProperties();

            if (properties.Count > 0)
            {
                var property = properties.First();

                bool descending = property.Direction == SortDirection.Descending ? true : false;

                uri = QueryHelpers.AddQueryString(uri, "sortBy", property.PropertyName);
                uri = QueryHelpers.AddQueryString(uri, "descending", descending.ToString());
            }

            if(!string.IsNullOrWhiteSpace(NameFilter))
            {
                uri = QueryHelpers.AddQueryString(uri, "nameFilter", NameFilter);
            }

            PaginationResult? result = await Http.GetFromJsonAsync<PaginationResult>(uri);

            if (result is null)
            {
                return GridItemsProviderResult.From<Student>([], 0);
            }

            return GridItemsProviderResult.From(result.Students, result.Total);
        };
    }

    public record PaginationResult(Student[] Students, int Total);
}