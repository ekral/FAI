#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","C#"]},{"name":"vscode","aliases":["frontend"]},{"name":".NET","aliases":[],"languageName":null},{"name":"mermaid","languageName":"Mermaid","aliases":[]}]}}

#!markdown

# Partial function a Currying
---

V následujících příkladech si probereme partial function a currying v jazyce C#. 

Nejprve si nadefinujeme funkci `Format`, která má dva parametry typu `int` a `bool` a vrací řetězec s hodnotami těchto proměnných.

#!csharp

string Format(int a, bool b)
{
    return $"a: {a} b: {b}";
}

string vysledek = Format(1, true);

Console.WriteLine(vysledek);

#!markdown

## 1. Partial function application 

Partial function application znamená, že předáme jednomu parametru argument a vytvoříme novou funkci, která má o jeden parametr méně. Typ `Func<bool, string>` představuje delegáta metody, která má jeden parametr typu `int` a vrací `string`. Návratový typ se uvádí vždy jako poslední.

#!csharp

Func<bool, string> funkce = b => Format(1, b);

string vysledek = funkce(true);

Console.WriteLine(vysledek);

#!markdown

## 2. Currying

Currying představuje převod funkce s více argumenty na sérii volání funkcí s jedním argumentem. Jazyk C# nemá narozdíl například od funkcionálního programovacího jazyka Haskel zabudovanou podporu pro currying. Jazyk Haskel má přímo příkazy *curry* a *uncurry* a všechny funkce v Haskelu jsou považovány za curried, což znamená že funkce v Haskelu získávají jen jeden argument ([Haskell Currying](https://wiki.haskell.org/Currying)). Jazyk Haskel byl pojmenován po matematikovi se jménem [Haskell Curry](https://en.wikipedia.org/wiki/Haskell_Curry), odtud tedy pochází i název této technky. Následující příklad v jazyce C# je tedy určený jen pro pochopení základního principu. 

V následujícím příkladu funkce `formatCurried` vrací typ `Func<int, Func<bool, string>>`, což znamená delegát, který má jako parametr typ `int` a jako návratový typ má znovu delegáta, tentokrát s parametrem `bool` a návratovým typem `string`.

#!csharp

Func<int, Func<bool, string>> formatCurried = a => b => Format(a, b);

string vysledek = formatCurried(1)(true);

Console.WriteLine(vysledek);

#!markdown

Pro lepší pochopení výrazu `a => b => Format(a, b)` můžeme místo vnějšího lambda výrazu použít metodu.

#!csharp

Func<bool, string> FormatCurried(int a)
{
    return b => Format(a, b);
}

string vysledek = FormatCurried(1)(true);

Console.WriteLine(vysledek);

#!markdown

Předchozí zřetěžené volání funkcí `formatCurried(1)(true)` si můžeme rozepsat na více kroků. Získáme tedy opět funkci typu `Func<bool, string>`. Toho můžeme využít například pro inicializaci parametrů, protože získáme funkci, které zachytí předaný argument a ten je potom spojen s danou funkcí ([Capture of outer variables and variable scope in lambda expressions](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions#capture-of-outer-variables-and-variable-scope-in-lambda-expressions)).

Currying tedy představuje techniku umožnující mimo jiné jednoduše použít Partial function application. Jde o určitou formu inicializace stavu.

#!csharp

Func<bool, string> funkce = formatCurried(1);

string vysledek = funkce(true);

Console.WriteLine(vysledek);
