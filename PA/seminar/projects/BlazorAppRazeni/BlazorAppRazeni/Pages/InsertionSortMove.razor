@page "/insertion-move"

<PageTitle>Insertion Sort Move</PageTitle>

@* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Basic_concepts_of_grid_layout *@

<div class="d-flex gap-3 mb-3">
    @for (int i = 0; i < pole.Length; i++)
    {
        if (i == j)
        {
            <div class="fs-1 border-bottom border-3">@pole[i]</div>
        }
        else
        {
            <div class="fs-1">@pole[i]</div>
        }
    }
</div>

<div class="fs-1 mb-3">prvek @prvek</div>

<button class="btn btn-primary" @onclick="DalsiIterace">Next Iteration</button>

<div class="rz-p-0 rz-p-md-12">
    <RadzenChart>
        <RadzenColumnSeries Data="@Data" CategoryProperty="Caption" ValueProperty="Data">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenLegend Visible="false" />
    </RadzenChart>
</div>

@code {
    DataItem[] Data => pole.Select((x, i) => new DataItem((i == j) ? $">{i + 1}<" : $"{i + 1}", x)).ToArray();

    private int[] pole = ReservoarSampling.Generate(9, 9);

    int index;
    int j;
    int prvek;

    protected override void OnInitialized()
    {
        Inicializace();
    }

    void Inicializace()
    {
        index = 0;
        j = index + 1;
        prvek = pole[j];
    }

    void DalsiIterace()
    {
        // Shift element to the right
        if ((j > 0) && prvek < pole[j - 1])
        {
            pole[j] = pole[j - 1];
            j--;
        }
        else
        {
            // Place the element in its correct position
            pole[j] = prvek;

            index = (index + 1) % (pole.Length - 1);

            j = index + 1;
            prvek = pole[j];
        }
    }
}
