@page "/quick"

<PageTitle>Quick Sort</PageTitle>

<div class="d-flex gap-3 mb-3">
    @for (int i = 0; i < pole.Length; i++)
    {
        if (i == this.i)
        {
            <div class="fs-1 border-bottom border-primary border-3">@pole[i]</div>
        }
        else if (i == this.j)
        {
            <div class="fs-1 border-bottom border-secondary border-3">@pole[i]</div>
        }
        else
        {
            <div class="fs-1">@pole[i]</div>
        }
    }
</div>

<div class="fs-1 mb-3">pivot @pivot</div>

<button class="btn btn-primary" @onclick="DalsiIterace">Next Iteration</button>

<div class="rz-p-0 rz-p-md-12">
    <RadzenChart>
        <RadzenColumnSeries Data="@Data" CategoryProperty="Caption" ValueProperty="Data">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenLegend Visible="false" />
    </RadzenChart>
</div>

@code {
    int low;
    int high;
    int pivot;
    int j;
    int i;

    DataItem[] Data => pole.Select((x, i) => new DataItem((i == j) ? $">{i + 1}<" : $"{i + 1}", x)).ToArray();

    private int[] pole = ReservoarSampling.Generate(9, 9);


    protected override void OnInitialized()
    {
        Inicializace();
    }

    void Inicializace()
    {
        low = 0;
        high = pole.Length - 1;
        pivot = pole[high];
        i = low;
        j = low;
    }

    void DalsiIterace()
    {
        if (j <= high - 1)
        {
            if (pole[j] <= pivot)
            {
                int tmp = pole[i];
                pole[i] = pole[j];
                pole[j] = tmp;

                ++i;
            }

            ++j;
        }
        else
        {
            int tmp = pole[i];
            pole[i] = pole[j];
            pole[j] = tmp;

            Inicializace();
        }
    }
}
