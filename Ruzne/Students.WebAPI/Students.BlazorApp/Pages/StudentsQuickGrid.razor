@page "/quickgrid"
@inject HttpClient Http
@inject NavigationManager Navigation

@using Microsoft.AspNetCore.Components.QuickGrid

<h3>Students QuickGrid</h3>

@if (studenti is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="grid" tabindex="-1">
        <QuickGrid ItemsProvider="gridItemsProvider" Pagination="pagination">
            <PropertyColumn Property="@(s => s.StudentId)" Title="Id" Sortable="true" />
            <PropertyColumn Property="@(s => s.Jmeno)" Title="Jmeno" Sortable="true" />
            <PropertyColumn Property="@(s => s.Studuje)" Title="Studuje" Sortable="true" />
        </QuickGrid>

        <Paginator State="pagination" />
    </div>
}

@code {
    PaginationState pagination = new PaginationState() { ItemsPerPage = 10 };

    GridItemsProvider<Student>? gridItemsProvider;

    protected override void OnInitialized()
    {
        gridItemsProvider = async req =>
        {
            var property = req.GetSortByProperties().FirstOrDefault();

            string url = $"/students/page?startIndex={req.StartIndex}&count={req.Count ?? 10}&";

            PaginationResult? result = await Http.GetFromJsonAsync<PaginationResult>(url);

            if (result is not null)
            {
                return GridItemsProviderResult.From(result.Students, result.Total);
            }
            
            return GridItemsProviderResult.From<Student>([], 0);
        };
    }

    public record PaginationResult(Student[] Students, int Total);
}
